The purpose of this tutorial is primarily to provide conceptual help 
for using the lausanne parcellations that cvu comes with.  You can adapt your 
data to these parcellations, thus obviating the need to create your own 
annotations and labels.

As someone who has done a bit of work to create annotations and labels in
freesurfer, but not a lot because other members of my lab did this work -- I 
don't recommend doing it.  It is very difficult and rather archaic and usually 
not that desirable especially if you have not done a lot
of work specifically looking at the task of anatomically parcellating.  Instead,
use one of the resolutions of the lausanne parcellations provided with cvu.

The way in which you parcellate is intricately related to the tools and methods
you use in calculating connectivity.

In general one of the following strategies is likely to be needed.
	Tools that do this include MNE (MEG) and FSFAST (fMRI)
	Connectivity can then be calculated by investigating properties of the
	phase and amplitude structure of the corresponding timeseries.
Counting tracts that run between volumes extracted from labels.
	Tools that do this include DSIStudio and connectomemapper. Additionally I 
	have some scripts that do this with samples created by FSL bedpost.
	This is a direct structural connectivity metric between regions.

Here is a list of useful tools that I use to get surfaces / source data into
	the lausanne parcellation, starting with the annotation file included in
	cvu:

Extracting labels from an annotation: 
	freesurfer mri_annotation2label
	(these labels are in the fsaverage5 brain)
Morphing labels from fsaverage5 to subject space
	freesurfer mri_label2label
	mri_label2label --srcsubject fsaverage5 --trgsubject <subject>
Morphing labels into volumes
	freesurfer mri_label2vol
Removing overlapping voxels in a volume:
	There are more vertices in a surface than voxels in a typical 3T scan.
	Thus I provide bigmask.py, a little utility to resolve the overlap.

	this script uses a closest distance strategy to remove overlapping voxels.
	that is, it calculates the centroid of each ROI, and then assigns each voxel
	claimed by multiple ROIs to the ROI whose euclidean distance to the voxel
	is lowest.  In case of a tie one of the closest ROIs is picked at random.


Tools for extracting signal from labels:
	MNE / MNE python
		mne_compute_raw_inverse --labeldir <dir>
	FSFAST mri_segstats 
		mri_segstats --avgwf <outfile> --annot fsaverage5 <hemi> <parc>	
	
Tools for counting tracts between volumes:
	connectomemapper
	DSIStudio
	FSL
		probtrackx --mode=seedmask --os2t --targetmasks <file>
			This task requires using the classification targets mode of
			probtrackx.  See the FSL documentation for more information.
		fslstats <volume> -V
